#!/usr/bin/env bash
set -euo pipefail

# ============================================================
# setup_vault.sh (Linux only, wget + unzip/bsdtar)
# - Download: wget (required)
# - SHA256:   sha256sum | shasum | openssl (uno qualunque)
# - Unzip:    unzip | bsdtar (uno dei due)
# - Opzioni:
#     --dev           avvia Vault in dev mode e genera .env
#     --version X.Y.Z specifica la versione (default 1.17.6)
#     --force         reinstalla anche se esiste già
# ============================================================

VAULT_VER_DEFAULT="1.17.6"
VAULT_VER="$VAULT_VER_DEFAULT"
RUN_DEV="false"
FORCE="false"

log()  { printf "\033[1;34m[setup]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[error]\033[0m %s\n" "$*" >&2; }
ok()   { printf "\033[1;32m[ ok ]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }

usage() {
  cat <<EOF
Usage: $0 [--dev] [--version X.Y.Z] [--force] [--help]
  --dev                avvia Vault in dev mode e crea .env
  --version X.Y.Z      versione di Vault (default: ${VAULT_VER_DEFAULT})
  --force              reinstalla anche se vault è già presente
  --help               mostra questo help

Requisiti:
  - wget (obbligatorio per il download)
  - unzip OPPURE bsdtar (per estrarre lo zip)
  - sha256sum OPPURE shasum OPPURE openssl (per verificare l'hash)
EOF
}

# ---- parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --dev) RUN_DEV="true"; shift ;;
    --version) VAULT_VER="${2:-}"; shift 2 ;;
    --force) FORCE="true"; shift ;;
    --help|-h) usage; exit 0 ;;
    *) err "Argomento sconosciuto: $1"; usage; exit 1 ;;
  esac
done

has() { command -v "$1" >/dev/null 2>&1; }

need() {
  # need <cmd> <msg>
  if ! has "$1"; then
    err "$2"
    exit 1
  fi
}

cpu_arch() {
  case "$(uname -m)" in
    x86_64|amd64) echo "amd64" ;;
    aarch64|arm64) echo "arm64" ;;
    *) err "Architettura non supportata: $(uname -m)"; return 1 ;;
  esac
}

sha256_of() {
  # sha256_of <file> -> stampa l'hash hex
  local f="$1"
  if has sha256sum; then
    sha256sum "$f" | awk '{print $1}'
  elif has shasum; then
    shasum -a 256 "$f" | awk '{print $1}'
  elif has openssl; then
    openssl dgst -sha256 "$f" | awk '{print $NF}'
  else
    err "Serve uno tra: sha256sum | shasum | openssl per verificare l'hash."
    return 1
  fi
}

unzip_any() {
  # unzip_any <zip> <dest>
  local z="$1" d="$2"
  mkdir -p "$d"
  if has unzip; then
    unzip -q "$z" -d "$d"
  elif has bsdtar; then
    bsdtar -xf "$z" -C "$d"
  else
    err "Serve uno tra: unzip | bsdtar per estrarre lo zip."
    return 1
  fi
}

install_vault() {
  need wget "wget non trovato. Installa wget e riprova."
  local arch zip url sums tmp expected actual
  arch="$(cpu_arch)"
  tmp="$(mktemp -d)"
  zip="vault_${VAULT_VER}_linux_${arch}.zip"
  url="https://releases.hashicorp.com/vault/${VAULT_VER}/${zip}"
  sums="https://releases.hashicorp.com/vault/${VAULT_VER}/vault_${VAULT_VER}_SHA256SUMS"

  log "Scarico Vault ${VAULT_VER} (${arch})…"
  wget -q "$url"  -O "${tmp}/${zip}"
  wget -q "$sums" -O "${tmp}/SHA256SUMS"

  log "Verifico SHA256…"
  expected="$(grep -E "[[:space:]]${zip}\$" "${tmp}/SHA256SUMS" | awk '{print $1}')"
  if [[ -z "${expected}" ]]; then
    expected="$(grep "${zip}" "${tmp}/SHA256SUMS" | awk '{print $1}')"
  fi
  [[ -n "${expected}" ]] || { err "Impossibile trovare ${zip} in SHA256SUMS"; exit 1; }

  actual="$(sha256_of "${tmp}/${zip}")"
  if [[ "${expected}" != "${actual}" ]]; then
    err "Checksum mismatch! expected=${expected} actual=${actual}"
    exit 1
  fi
  ok "SHA256 ok."

  log "Estraggo lo zip…"
  unzip_any "${tmp}/${zip}" "${tmp}"

  sudo mv "${tmp}/vault" /usr/local/bin/
  sudo chmod +x /usr/local/bin/vault
  rm -rf "${tmp}"
  ok "Vault installato in /usr/local/bin/vault"
}

start_dev() {
  has vault || { err "Vault non presente in PATH"; exit 1; }
  log "Avvio Vault in dev mode (root token = root)…"
  if pgrep -x vault >/dev/null 2>&1; then
    warn "Sembra che Vault sia già in esecuzione. Skip avvio."
  else
    nohup vault server -dev -dev-root-token-id="root" > vault-dev.log 2>&1 &
    sleep 1
  fi

  local addr="http://127.0.0.1:8200"
  log "Scrivo .env (VAULT_ADDR, VAULT_TOKEN)…"
  cat > .env <<EOF
# Auto-generated by setup_vault.sh
VAULT_ADDR=${addr}
VAULT_TOKEN=root
EOF
  ok "Dev pronto. VAULT_ADDR=${addr}  VAULT_TOKEN=root"
  log "Test: 'vault status' e 'vault kv put secret/test message=hello'."
}

main() {
  if has vault && [[ "$FORCE" != "true" ]]; then
    ok "Vault già installato: $(vault --version || true)"
  else
    install_vault
  fi

  if [[ "$RUN_DEV" == "true" ]]; then
    start_dev
  else
    log "Installazione completata. Per avviare dev mode: '$0 --dev'"
  fi
}

main "$@"
